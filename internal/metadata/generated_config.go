// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for servicebus metrics.
type MetricsConfig struct {
	ServicebusQueueActiveMessages                 MetricConfig `mapstructure:"servicebus.queue.active_messages"`
	ServicebusQueueCurrentSize                    MetricConfig `mapstructure:"servicebus.queue.current_size"`
	ServicebusQueueDeadletterMessages             MetricConfig `mapstructure:"servicebus.queue.deadletter_messages"`
	ServicebusQueueMaxSize                        MetricConfig `mapstructure:"servicebus.queue.max_size"`
	ServicebusQueueScheduledMessages              MetricConfig `mapstructure:"servicebus.queue.scheduled_messages"`
	ServicebusTopicCurrentSize                    MetricConfig `mapstructure:"servicebus.topic.current_size"`
	ServicebusTopicMaxSize                        MetricConfig `mapstructure:"servicebus.topic.max_size"`
	ServicebusTopicScheduledMessages              MetricConfig `mapstructure:"servicebus.topic.scheduled_messages"`
	ServicebusTopicSubscriptionActiveMessages     MetricConfig `mapstructure:"servicebus.topic.subscription.active_messages"`
	ServicebusTopicSubscriptionDeadletterMessages MetricConfig `mapstructure:"servicebus.topic.subscription.deadletter_messages"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		ServicebusQueueActiveMessages: MetricConfig{
			Enabled: true,
		},
		ServicebusQueueCurrentSize: MetricConfig{
			Enabled: true,
		},
		ServicebusQueueDeadletterMessages: MetricConfig{
			Enabled: true,
		},
		ServicebusQueueMaxSize: MetricConfig{
			Enabled: true,
		},
		ServicebusQueueScheduledMessages: MetricConfig{
			Enabled: true,
		},
		ServicebusTopicCurrentSize: MetricConfig{
			Enabled: true,
		},
		ServicebusTopicMaxSize: MetricConfig{
			Enabled: true,
		},
		ServicebusTopicScheduledMessages: MetricConfig{
			Enabled: true,
		},
		ServicebusTopicSubscriptionActiveMessages: MetricConfig{
			Enabled: true,
		},
		ServicebusTopicSubscriptionDeadletterMessages: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for servicebus resource attributes.
type ResourceAttributesConfig struct {
	ServicebusNamespaceName ResourceAttributeConfig `mapstructure:"servicebus.namespace.name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		ServicebusNamespaceName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for servicebus metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
